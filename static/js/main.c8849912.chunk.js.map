{"version":3,"sources":["firebase.js","components/LinkForm.js","components/Links.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","LinkForm","props","initialStateValues","url","name","description","useState","values","setValues","handleInputChange","e","target","value","getLinkById","id","a","collection","doc","get","data","useEffect","currentId","className","onSubmit","preventDefault","addOrEditLink","type","placeholder","onChange","rows","Links","links","setLinks","setCurrentId","linkObject","set","toast","autoClose","update","console","error","onDeleteLink","window","confirm","delete","getLinks","onSnapshot","querySnapshot","docs","forEach","push","map","link","key","onClick","href","rel","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c8849912.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n  apiKey: \"AIzaSyCrI0bCG-bR9X7E_Z8Cv_ibneyPi3WNpLk\",\n  authDomain: \"reactf-82e08.firebaseapp.com\",\n  databaseURL: \"https://reactf-82e08.firebaseio.com\",\n  projectId: \"reactf-82e08\",\n  storageBucket: \"reactf-82e08.appspot.com\",\n  messagingSenderId: \"716418123400\",\n  appId: \"1:716418123400:web:e35d30e865121d1329c13d\",\n};\n// Initialize Firebase\nconst fb = firebase.initializeApp(firebaseConfig);\n\n//exportando el objeto para usarlo\nexport const db = fb.firestore();\n\n","import React, { useState, useEffect } from \"react\";\nimport { db } from \"../firebase\";\n\nconst LinkForm = (props) => {\n  const initialStateValues = {\n    url: \"\",\n    name: \"\",\n    description: \"\",\n  };\n  const [values, setValues] = useState(initialStateValues);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // console.log(values);\n    props.addOrEditLink(values);\n    setValues({ ...initialStateValues });\n  };\n  const handleInputChange = (e) => {\n    // console.log(e.target.value);\n    const { name, value } = e.target;\n    setValues({ ...values, [name]: value });\n  };\n\n  const getLinkById = async (id) => {\n    const doc = await db.collection(\"links\").doc(id).get();\n    // console.log(doc.data());\n    setValues({ ...doc.data() });\n  };\n  useEffect(() => {\n    if (props.currentId === \"\") {\n      setValues({ ...initialStateValues });\n    } else {\n      //   console.log(\"edit\");\n      getLinkById(props.currentId);\n    }\n  }, [props.currentId]);\n  return (\n    <form className=\"card card-body\" onSubmit={handleSubmit}>\n      <div className=\"form-group  input-group\">\n        <div className=\"input-group-text bg-light\">\n          <i className=\"material-icons\">insert_link</i>\n        </div>\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"http://\"\n          name=\"url\"\n          onChange={handleInputChange}\n          value={values.url}\n        />\n      </div>\n      <div className=\"form-group input-group\">\n        <div className=\"input-group-text bg-light\">\n          <i className=\"material-icons\">create</i>\n        </div>\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Website name\"\n          name=\"name\"\n          onChange={handleInputChange}\n          value={values.name}\n        />\n      </div>\n      <div className=\"form-group\">\n        <textarea\n          name=\"description\"\n          id=\"\"\n          rows=\"3\"\n          className=\"form-control\"\n          placeholder=\"Descripcion\"\n          onChange={handleInputChange}\n          value={values.description}\n        ></textarea>\n      </div>\n      <button className=\"btn btn-primary btn-block\">\n        {props.currentId === \"\" ? \"Save\" : \"Update\"}\n      </button>\n    </form>\n  );\n};\n\nexport default LinkForm;\n","import React, { useEffect, useState } from \"react\";\nimport LinkForm from \"./LinkForm\";\nimport { db } from \"../firebase\";\nimport { toast } from \"react-toastify\";\n\nconst Links = () => {\n  const [links, setLinks] = useState([]);\n  const [currentId, setCurrentId] = useState(\"\");\n\n  const addOrEditLink = async (linkObject) => {\n    try {\n      if (currentId === \"\") {\n        // console.log(linkObject);\n        await db.collection(\"links\").doc().set(linkObject);\n        // console.log(\"Agregado\");\n        toast(\"New link added!\", {\n          type: \"success\",\n          autoClose: 2000,\n        });\n      } else {\n        await db.collection(\"links\").doc(currentId).update(linkObject);\n        toast(\"Link updated!\", {\n          type: \"info\",\n          autoClose: 2000,\n        });\n        setCurrentId(\"\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const onDeleteLink = async (id) => {\n    if (window.confirm(\"Are you sure you want to delete this link?\")) {\n      await db.collection(\"links\").doc(id).delete();\n      // console.log(\"Deleted\");\n      toast(\"Link deleted!\", {\n        type: \"error\",\n        autoClose: 2000,\n      });\n    }\n  };\n\n  const getLinks = async () => {\n    db.collection(\"links\").onSnapshot((querySnapshot) => {\n      const docs = [];\n      querySnapshot.forEach((doc) => {\n        // console.log(doc.data());\n        docs.push({ ...doc.data(), id: doc.id });\n      });\n      // console.log(docs);\n      setLinks(docs);\n    });\n  };\n  useEffect(() => {\n    // console.log(\"object\");\n    getLinks();\n  }, []);\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-md-6\">\n        <LinkForm {...{ addOrEditLink, currentId, links }} />\n      </div>\n      <div className=\"col-md-6\">\n        {links.map((link) => (\n          <div className=\"card mb-1\" key={link.id}>\n            <div className=\"card-body\">\n              <div className=\"d-flex justify-content-between\">\n                <h4>{link.name}</h4>\n                <div>\n                  <i\n                    className=\"material-icons text-danger\"\n                    onClick={() => onDeleteLink(link.id)}\n                  >\n                    close\n                  </i>\n                  <i\n                    className=\"material-icons text-success\"\n                    onClick={() => setCurrentId(link.id)}\n                  >\n                    create\n                  </i>\n                </div>\n              </div>\n              <p>{link.description}</p>\n              <a href={link.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                Go to website\n              </a>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Links;\n","import React from \"react\";\nimport \"./App.css\";\nimport Links from \"./components/Links\";\nimport { ToastContainer } from \"react-toastify\";\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <div className=\"\">\n        <Links />\n      </div>\n      <ToastContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootswatch/dist/minty/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}